import { RenderGeneric } from "./system/generic/render/RenderGeneric";
import { ContextController } from "./system/prototype/ContextController";
import { PluginGeneric } from "./tension/generic/plugin/PluginGeneric";
import { HooksGeneric } from "./tension/generic/plugin/hooks/HooksGeneric";
import { AbstractComponent } from "./tension/prototype/AbstractComponent";
import { PrefaceGeneric } from "./tension/generic/plugin/preface/PrefaceGeneric";
import { RouterGeneric } from "./tension/generic/router/RouterGeneric";
/**
 * This class is used to prototype the properties type
 */
export declare class PropertyType {
    static STRING: 'string';
    static INT: 'int';
    static FLOAT: 'float';
    static BOOLEAN: 'boolean';
    static JSON: 'json';
}
/**
 * This abstract class is the plugin interface class for those who want to develop plugin for the system
 */
export declare abstract class AbstractPlugin implements PluginGeneric {
    plugin(preface: PrefaceGeneric, hooks: HooksGeneric): void;
}
/**
 *  This abstract class is the router interface class for those who want to develop router for the system
 */
export declare abstract class AbstractRouter implements RouterGeneric {
    /**
     * The method must be overwritten by developer
     */
    getComponent(): Component;
    /**
     * The method must be overwritten by developer
     */
    getPathVariable(): Map<string, any>;
}
/**
 * Here is the template class for render component!
 */
export declare class Component extends AbstractComponent {
    constructor(config: {
        name: string;
        template: string;
        config: {
            boxMode: boolean;
        };
        boxStyle?: string;
        props?: {} | string[];
        data?: {};
        computed?: {};
        methods?: {};
        watcher?: {};
        beforeRender?: () => void;
        afterRender?: () => void;
    });
}
/**
 * This proto is the application proto.
 */
export declare class RenderJS implements RenderGeneric {
    contextController: ContextController;
    constructor();
    /**
     * This func is used to execute plugins
     */
    use_plugin(plugin: PluginGeneric): void;
    /**
     * This unc is used to register component to system
     * @param component
     */
    add_tag(component: Component): void;
    /**
     * This func is used to work under the route mode
     */
    listen(): void;
    /**
     * This func is used to work under the directive render mode
     */
    render(component: Component, mounter: string): void;
    /**
     * This func is used to work under the weave  mode
     */
    weave(mounter: string): void;
}
/**
 * This func is used to extend window environment
 * @param on
 * @param func
 */
export declare function extend_window(on: string, func: any): void;
