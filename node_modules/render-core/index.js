var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { render_for_listen, render_for_render, render_for_weave } from "./xboot/entrance";
import { registerTagLib } from "./xboot/tagProcessor";
import { HooksAction } from "./tension/prototype/HooksAction";
import { ContextController } from "./system/prototype/ContextController";
import { AbstractComponent } from "./tension/prototype/AbstractComponent";
import { set_context_controller } from "./system/recorder/table0/system_func_0";
import { PrefaceAction } from "./tension/prototype/PrefaceAction";
import { SystemInitPlugin } from "./tension/SystemInitPlugin";
/**
 * This class is used to prototype the properties type
 */
var PropertyType = /** @class */ (function () {
    function PropertyType() {
    }
    return PropertyType;
}());
export { PropertyType };
/**
 * This abstract class is the plugin interface class for those who want to develop plugin for the system
 */
var AbstractPlugin = /** @class */ (function () {
    function AbstractPlugin() {
    }
    AbstractPlugin.prototype.plugin = function (preface, hooks) { };
    return AbstractPlugin;
}());
export { AbstractPlugin };
/**
 *  This abstract class is the router interface class for those who want to develop router for the system
 */
var AbstractRouter = /** @class */ (function () {
    function AbstractRouter() {
    }
    /**
     * The method must be overwritten by developer
     */
    AbstractRouter.prototype.getComponent = function () {
        return undefined;
    };
    /**
     * The method must be overwritten by developer
     */
    AbstractRouter.prototype.getPathVariable = function () {
        return new Map();
    };
    return AbstractRouter;
}());
export { AbstractRouter };
/**
 * Here is the template class for render component!
 */
var Component = /** @class */ (function (_super) {
    __extends(Component, _super);
    function Component(config) {
        return _super.call(this, config) || this;
    }
    return Component;
}(AbstractComponent));
export { Component };
/**
 * This proto is the application proto.
 */
var RenderJS = /** @class */ (function () {
    function RenderJS() {
        /* initiate the page controller */
        this.contextController = new ContextController({
            boxMode: false,
        });
        /* init the basis extension */
        this.use_plugin(new SystemInitPlugin());
    }
    /**
     * This func is used to execute plugins
     */
    RenderJS.prototype.use_plugin = function (plugin) {
        plugin.plugin(new PrefaceAction(), new HooksAction());
    };
    /**
     * This unc is used to register component to system
     * @param component
     */
    RenderJS.prototype.add_tag = function (component) {
        registerTagLib(component);
    };
    /**
     * This func is used to work under the route mode
     */
    RenderJS.prototype.listen = function () {
        set_context_controller(this.contextController);
        render_for_listen();
    };
    /**
     * This func is used to work under the directive render mode
     */
    RenderJS.prototype.render = function (component, mounter) {
        set_context_controller(this.contextController);
        render_for_render(component, mounter);
    };
    /**
     * This func is used to work under the weave  mode
     */
    RenderJS.prototype.weave = function (mounter) {
        set_context_controller(this.contextController);
        render_for_weave(mounter);
    };
    return RenderJS;
}());
export { RenderJS };
/**
 * This func is used to extend window environment
 * @param on
 * @param func
 */
export function extend_window(on, func) {
    Reflect.set(window, on, func);
}
