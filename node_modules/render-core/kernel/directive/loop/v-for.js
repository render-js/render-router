import { resolver_array_single } from "./v-for-utility";
/**
 * 展开数据
 * @param elements
 * @param data
 */
export function parse_directive_for_of(elements, data) {
    var _loop_1 = function (i) {
        var result = elements[i].hasAttribute("@for");
        if (result) {
            var dataName = elements[i].getAttribute("@for");
            elements[i].removeAttribute("@for");
            if (data[dataName] instanceof Array) {
                data[dataName].forEach(function (value, index) {
                    //从数组中取出一条信息，然后开始渲染
                    extractForArray(elements[i].parentNode, elements[i], index, value);
                    i++;
                });
                //将模板节点删除
                elements[i].parentNode.removeChild(elements[i]);
                //重新回到原来的索引值
                i--;
            }
            else {
                console.log("Instruction @list need an array datatype to extract!");
            }
        }
        if (elements[i]) {
            parse_directive_for_of(elements[i].children, data);
        }
        out_i_1 = i;
    };
    var out_i_1;
    for (var i = 0; i < elements.length; i++) {
        _loop_1(i);
        i = out_i_1;
    }
}
/**
 *
 * @param baseRoot
 * @param temp
 * @param index
 * @param data
 */
export function extractForArray(baseRoot, temp, index, data) {
    //将渲染出来的数据模板插入到根元素下
    part_render_array(baseRoot, temp, index, data);
}
/**
 * 该函数用于处理数组类型数据的展开
 * @param baseRoot
 * @param temp
 * @param index
 * @param data
 */
export function part_render_array(baseRoot, temp, index, data) {
    // @ts-ignore
    var clone = temp.cloneNode(true);
    // @ts-ignore
    resolver_array_single(clone, index, data);
    //插入模板节点
    baseRoot.insertBefore(clone, temp);
}
