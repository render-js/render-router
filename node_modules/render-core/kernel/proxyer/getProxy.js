import { update_Render } from "../renderer/updateRender";
import { locateInputAddress } from "../../system/utility/react/sectionUtility";
/**
 * @param data
 * @param updater
 */
export function get_proxy_for_method(data, updater) {
    var handel = {};
    handel["set"] = get_setter_for_method_proxy(updater);
    return new Proxy(data, handel);
}
/**
 * @param updater
 */
function get_setter_for_method_proxy(updater) {
    var setter = function (obj, prop, value) {
        Reflect.set(obj, prop, value);
        update_Render(this);
        try {
            this.watcher[prop](obj[prop], value);
        }
        catch (error) {
        }
        locateInputAddress(this);
        Reflect.deleteProperty(this, "origin");
        return true;
    };
    return setter.bind(updater);
}
/**
 * @param origin
 */
export function get_proxy_for_watcher(origin) {
    var handles = {};
    return new Proxy(origin, handles);
}
/**
 * @param origin
 */
export function get_proxy_for_computed(origin) {
    var handles = {};
    return new Proxy(origin, handles);
}
