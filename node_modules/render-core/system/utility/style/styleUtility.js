import { loadStyle } from "../../loader/loader";
import { get_theme_style, set_theme_style } from "../../recorder/table1/system_func_1";
import { get_style_library } from "../../recorder/table0/system_func_0";
/**
 *
 * @param tag
 */
export function checkStyleLabel(tag) {
    //获取所有的style标签
    var styles = document.getElementsByTagName("style");
    //遍历标签，查看是否已经加载tag样式
    for (var i = 0; i < styles.length; i++) {
        if (styles[i].getAttribute("tag") === tag.toUpperCase())
            //样式已经加载
            return true;
    }
    //样式未加载
    return false;
}
/**
 * Here is the function go get all styles associated with the tag component.
 * @param component
 * @param styleLib
 */
export function themeStyle(component, styleLib) {
    var template = component.getTemplate();
    var dom = document.createElement("div");
    dom.innerHTML = template;
    var styles = dom.getElementsByTagName("template")[0].content.querySelectorAll("style");
    var componentStyleList = new Map();
    for (var i = 0; i < styles.length; i++) {
        componentStyleList.set(styles[i].getAttribute("theme"), styles[i].innerText);
    }
    styleLib.set(component.getName().toUpperCase(), componentStyleList);
}
/**
 * Here is the function to resolve
 * @param tag
 * @param styleLib
 */
export function loader_tag_style(tag, styleLib) {
    //获取到启动样式
    var theme = get_theme_style();
    if (styleLib.get(tag.toUpperCase())) {
        if (styleLib.get(tag.toUpperCase()).get(theme) === undefined) {
            console.log("tag:" + tag + " has no theme " + theme);
            if (styleLib.get(tag.toUpperCase()).get("default") === undefined) {
                console.log("tag:" + tag + " has no theme " + "default");
            }
            else {
                loadStyle(tag, "default", styleLib.get(tag.toUpperCase()).get("default"));
            }
        }
        else {
            loadStyle(tag, theme, styleLib.get(tag.toUpperCase()).get(theme));
        }
    }
}
/**
 *
 * @param tag
 * @param theme
 */
export function changeStyle(tag, theme) {
    var styleTxt = get_style_library().get(tag.toUpperCase()).get(theme);
    if (styleTxt === undefined) {
        console.log("Dont`t find this style!");
    }
    else {
        var style = document.createElement('style');
        var text = document.createTextNode(styleTxt);
        style.appendChild(text);
        style.setAttribute("tag", tag.toUpperCase());
        style.setAttribute("theme", theme);
        var head = document.getElementsByTagName('head')[0];
        var target = head.querySelector("style" + "[tag=" + tag.toUpperCase() + "]");
        head.replaceChild(style, target);
    }
}
/**
 *
 * @param theme
 */
export function changeTheme(theme) {
    get_style_library().forEach(function (value, key) {
        var styles = document.getElementsByTagName("style");
        for (var i = 0; i < styles.length; i++) {
            if (styles[i].getAttribute("tag") === key) {
                var style = document.createElement('style');
                if (value.get(theme)) {
                    var text = document.createTextNode(value.get(theme));
                    style.appendChild(text);
                    style.setAttribute("tag", key.toUpperCase());
                    style.setAttribute("theme", theme);
                    var head = document.getElementsByTagName('head')[0];
                    head.replaceChild(style, styles[i]);
                }
            }
        }
    });
    set_theme_style(theme);
}
