import { PropertyType } from "../../index";
/**
 * This function is used to resolve tag properties.
 * @param tag
 * @param properties
 */
export function resolve_props(tag, properties) {
    if (properties instanceof Array)
        return getAllPropsByArray(tag, properties);
    if (properties instanceof Object)
        return getAllPropsByObject(tag, properties);
}
/**
 *
 * @param node
 * @param array
 */
export function getAllPropsByArray(node, array) {
    var props = new Map();
    array.forEach(function (value) {
        // @ts-ignore
        if (node.getAttribute(value)) {
            // @ts-ignore
            props.set(value, node.getAttribute(value));
        }
    });
    return props;
}
/**
 *
 * @param node
 * @param object
 */
export function getAllPropsByObject(node, object) {
    var props = new Map();
    for (var objectKey in object) {
        // @ts-ignore
        if (node.getAttribute(objectKey)) {
            if (object[objectKey] === PropertyType.INT) { // @ts-ignore
                props.set(objectKey, parseInt(node.getAttribute(objectKey)));
            }
            else if (object[objectKey] === PropertyType.FLOAT) { // @ts-ignore
                props.set(objectKey, parseFloat(node.getAttribute(objectKey)));
            }
            else if (object[objectKey] === PropertyType.BOOLEAN) {
                // @ts-ignore
                props.set(objectKey, parseFloat(node.getAttribute(objectKey)));
            }
            else if (object[objectKey] === PropertyType.STRING) {
                // @ts-ignore
                props.set(objectKey, node.getAttribute(objectKey));
            }
            else if (object[objectKey] === PropertyType.JSON) {
                // @ts-ignore
                props.set(objectKey, JSON.parse(node.getAttribute(objectKey)));
            }
            else {
                // @ts-ignore
                props.set(objectKey, node.getAttribute(objectKey));
            }
        }
    }
    return props;
}
