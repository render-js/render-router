import { resolve_props } from "../resolver/props";
import { parse_directive_refs } from "../../kernel/directive/ref/v-ref";
import { get_user_anonymous_ext, get_user_ext_http } from "../recorder/table3/system_func_3";
import { get_path_variable } from "../recorder/table1/system_func_1";
export function inject_$name_to_data(name, origin) {
    Reflect.set(origin, "$name", name);
}
export function inject_$props_to_data(childNode, meta, origin) {
    var props = resolve_props(childNode, meta);
    Reflect.set(origin, "$props", props);
}
export function inject_$refs_to_data(template, origin) {
    var refs = new Map();
    parse_directive_refs(template.children, refs);
    Reflect.set(origin, "$refs", refs);
}
export function inject_$http_to_data(origin) {
    Reflect.set(origin, "$http", get_user_ext_http());
}
export function inject_$pathVariable_to_data(origin) {
    Reflect.set(origin, "$pathVariable", get_path_variable());
}
export function inject_$plugin_to_data(config) {
    Reflect.set(config, "$plugins", function (name) {
        return get_user_anonymous_ext(name);
    });
}
//注入对象
export function inject_$commit_to_data(data, commit) {
    Reflect.set(data, "$commit", commit);
}
//注入对象
export function inject_$publish_to_data(data, publisher) {
    Reflect.set(data, "$publish", publisher);
}
export function inject_$setter_to_data(data, setter) {
    Reflect.set(data, "$set", setter);
}
export function inject_$getter_to_data(data, getter) {
    Reflect.set(data, "$get", getter);
}
/**
 *
 * @param controller
 * @param proto
 */
export function inject_method_to_data(controller, proto) {
    var methods = Object.getOwnPropertyNames(proto.getMethods());
    methods.forEach(function (value) {
        if (value.match(/^\$\$[a-zA-Z0-9_]*/) !== null)
            Reflect.set(controller.originalData, value, proto.getMethods()[value].bind(controller.originalData));
        else
            Reflect.set(controller.originalData, value, proto.getMethods()[value].bind(controller.dataForMethod));
    });
}
/**
 *
 * @param controller
 * @param proto
 */
export function inject_watcher_to_controller(controller, proto) {
    var methods = Object.getOwnPropertyNames(proto.getWatcher());
    methods.forEach(function (value) {
        Reflect.set(controller.watcher, value, proto.getWatcher()[value].bind(controller.originalData));
    });
}
/**
 *
 * @param controller
 * @param proto
 */
export function inject_computed_to_controller(controller, proto) {
    var methods = Object.getOwnPropertyNames(proto.getComputed());
    methods.forEach(function (value) {
        Reflect.set(controller.computed, value, proto.getComputed()[value].bind(controller.originalData));
    });
}
